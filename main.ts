import {
  ConnInfo,
  Handler,
  serve,
} from "https://deno.land/std@0.187.0/http/server.ts";
import isbot from "https://esm.sh/isbot@3.6.10";
import * as Colors from "https://deno.land/std@0.188.0/fmt/colors.ts";

import { Command } from "https://deno.land/x/cliffy@v0.25.7/command/mod.ts";

let cliOptions: { less?: true|undefined; botless?: true|undefined; output?: string|undefined; };
await new Command()
  .name("cliffy")
  .version("0.1.0")
  .description("Command line framework for Deno")
  .option("-l, --less", "Only log the IP address")
  .option("-b, --botless", "Omit logs generated by bot user agents.")
  .option("-o, --output <path>", "Save the logs to a file.")
  .action((options) => {
    cliOptions = options;
  })
  .parse(Deno.args);

let ipLogs = [];

const logIp = async (req: Request, connInfo: ConnInfo) => {
  const ip = req.headers.get("x-real-ip") ||
    req.headers.get("x-forwarded-for") ||
    (connInfo.remoteAddr as Deno.NetAddr).hostname;
  if (!ip) return console.log(Colors.red("REQUEST WITHOUT IP ADDRESS!"));
  let endMessage = Colors.green(Colors.underline("IP ADDRESS FOUND!"));
  endMessage += "\nIP Address: " + Colors.blue(ip);
  endMessage += "\nBot Detected: " + (isbot(req.headers.get("User-Agent")) ? Colors.red(`Yes [${req.headers.get("User-Agent")}]`) : Colors.green("No"));
  if (cliOptions?.botless && isbot(req.headers.get("User-Agent"))) return;
  const ipInfoRaw = await fetch(`https://ipinfo.io/${ip}/json`);
  
  if (!ipInfoRaw.ok) return endMessage;
  const ipInfo = await ipInfoRaw.json();
  endMessage += "\nCountry: " + Colors.blue(ipInfo.country);
  endMessage += "\nRegion: " + Colors.blue(ipInfo.region);
  endMessage += "\nCity: " + Colors.blue(ipInfo.city);
  endMessage += "\nLocation: " + Colors.blue(ipInfo.loc);
  endMessage += "\nOrganization: " + Colors.blue(ipInfo.org);
  endMessage += "\nTimezone: " + Colors.blue(ipInfo.timezone);
  endMessage += "\nPostal: " + Colors.blue(ipInfo.postal);
  return endMessage;
};

const handler: Handler = async (
  req: Request,
  connInfo: ConnInfo,
): Promise<Response> => {
  try {
    const em = await logIp(req, connInfo);
    ipLogs.push(Colors.stripColor(em));
    console.log(em);
  } catch (e) {
    console.error(e);
  }
  return new Response(null, {
    status: 302,
    headers: new Headers({
      "Location": "https://example.com",
    }),
  });
};

Deno.addSignalListener("SIGINT", () => {
  console.log(Colors.red(`\n${ipLogs.length > 0 ? `Writing logs to ${cliOptions?.output || "stdout"} and e` : "E"}xiting...`));
  if (ipLogs.length > 0) {
    Deno.writeFileSync(cliOptions?.output || "stdout", new TextEncoder().encode(ipLogs.join("\n\n")));
  }
  Deno.exit();
});

await serve(handler, { port: 8080 });
